// Code generated by mockery v2.52.3. DO NOT EDIT.

package mock

import (
	problem "gsprit/problem"

	mock "github.com/stretchr/testify/mock"
)

// MockJob is an autogenerated mock type for the Job type
type MockJob struct {
	mock.Mock
}

type MockJob_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJob) EXPECT() *MockJob_Expecter {
	return &MockJob_Expecter{mock: &_m.Mock}
}

// Activities provides a mock function with no fields
func (_m *MockJob) Activities() []problem.Activity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Activities")
	}

	var r0 []problem.Activity
	if rf, ok := ret.Get(0).(func() []problem.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]problem.Activity)
		}
	}

	return r0
}

// MockJob_Activities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activities'
type MockJob_Activities_Call struct {
	*mock.Call
}

// Activities is a helper method to define mock.On call
func (_e *MockJob_Expecter) Activities() *MockJob_Activities_Call {
	return &MockJob_Activities_Call{Call: _e.mock.On("Activities")}
}

func (_c *MockJob_Activities_Call) Run(run func()) *MockJob_Activities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Activities_Call) Return(_a0 []problem.Activity) *MockJob_Activities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Activities_Call) RunAndReturn(run func() []problem.Activity) *MockJob_Activities_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with no fields
func (_m *MockJob) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockJob_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type MockJob_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *MockJob_Expecter) Id() *MockJob_Id_Call {
	return &MockJob_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *MockJob_Id_Call) Run(run func()) *MockJob_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Id_Call) Return(_a0 string) *MockJob_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Id_Call) RunAndReturn(run func() string) *MockJob_Id_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with no fields
func (_m *MockJob) Index() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockJob_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockJob_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
func (_e *MockJob_Expecter) Index() *MockJob_Index_Call {
	return &MockJob_Index_Call{Call: _e.mock.On("Index")}
}

func (_c *MockJob_Index_Call) Run(run func()) *MockJob_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Index_Call) Return(_a0 int) *MockJob_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Index_Call) RunAndReturn(run func() int) *MockJob_Index_Call {
	_c.Call.Return(run)
	return _c
}

// JobType provides a mock function with no fields
func (_m *MockJob) JobType() problem.JobType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JobType")
	}

	var r0 problem.JobType
	if rf, ok := ret.Get(0).(func() problem.JobType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(problem.JobType)
	}

	return r0
}

// MockJob_JobType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobType'
type MockJob_JobType_Call struct {
	*mock.Call
}

// JobType is a helper method to define mock.On call
func (_e *MockJob_Expecter) JobType() *MockJob_JobType_Call {
	return &MockJob_JobType_Call{Call: _e.mock.On("JobType")}
}

func (_c *MockJob_JobType_Call) Run(run func()) *MockJob_JobType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_JobType_Call) Return(_a0 problem.JobType) *MockJob_JobType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_JobType_Call) RunAndReturn(run func() problem.JobType) *MockJob_JobType_Call {
	_c.Call.Return(run)
	return _c
}

// MaxTimeInVehicle provides a mock function with no fields
func (_m *MockJob) MaxTimeInVehicle() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxTimeInVehicle")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockJob_MaxTimeInVehicle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxTimeInVehicle'
type MockJob_MaxTimeInVehicle_Call struct {
	*mock.Call
}

// MaxTimeInVehicle is a helper method to define mock.On call
func (_e *MockJob_Expecter) MaxTimeInVehicle() *MockJob_MaxTimeInVehicle_Call {
	return &MockJob_MaxTimeInVehicle_Call{Call: _e.mock.On("MaxTimeInVehicle")}
}

func (_c *MockJob_MaxTimeInVehicle_Call) Run(run func()) *MockJob_MaxTimeInVehicle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_MaxTimeInVehicle_Call) Return(_a0 float64) *MockJob_MaxTimeInVehicle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_MaxTimeInVehicle_Call) RunAndReturn(run func() float64) *MockJob_MaxTimeInVehicle_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockJob) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockJob_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockJob_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockJob_Expecter) Name() *MockJob_Name_Call {
	return &MockJob_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockJob_Name_Call) Run(run func()) *MockJob_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Name_Call) Return(_a0 string) *MockJob_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Name_Call) RunAndReturn(run func() string) *MockJob_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Priority provides a mock function with no fields
func (_m *MockJob) Priority() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Priority")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockJob_Priority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Priority'
type MockJob_Priority_Call struct {
	*mock.Call
}

// Priority is a helper method to define mock.On call
func (_e *MockJob_Expecter) Priority() *MockJob_Priority_Call {
	return &MockJob_Priority_Call{Call: _e.mock.On("Priority")}
}

func (_c *MockJob_Priority_Call) Run(run func()) *MockJob_Priority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Priority_Call) Return(_a0 int) *MockJob_Priority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Priority_Call) RunAndReturn(run func() int) *MockJob_Priority_Call {
	_c.Call.Return(run)
	return _c
}

// RequiredSkills provides a mock function with no fields
func (_m *MockJob) RequiredSkills() *problem.Skills {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequiredSkills")
	}

	var r0 *problem.Skills
	if rf, ok := ret.Get(0).(func() *problem.Skills); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*problem.Skills)
		}
	}

	return r0
}

// MockJob_RequiredSkills_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequiredSkills'
type MockJob_RequiredSkills_Call struct {
	*mock.Call
}

// RequiredSkills is a helper method to define mock.On call
func (_e *MockJob_Expecter) RequiredSkills() *MockJob_RequiredSkills_Call {
	return &MockJob_RequiredSkills_Call{Call: _e.mock.On("RequiredSkills")}
}

func (_c *MockJob_RequiredSkills_Call) Run(run func()) *MockJob_RequiredSkills_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_RequiredSkills_Call) Return(_a0 *problem.Skills) *MockJob_RequiredSkills_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_RequiredSkills_Call) RunAndReturn(run func() *problem.Skills) *MockJob_RequiredSkills_Call {
	_c.Call.Return(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockJob) Size() *problem.Capacity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 *problem.Capacity
	if rf, ok := ret.Get(0).(func() *problem.Capacity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*problem.Capacity)
		}
	}

	return r0
}

// MockJob_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockJob_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockJob_Expecter) Size() *MockJob_Size_Call {
	return &MockJob_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockJob_Size_Call) Run(run func()) *MockJob_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_Size_Call) Return(_a0 *problem.Capacity) *MockJob_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_Size_Call) RunAndReturn(run func() *problem.Capacity) *MockJob_Size_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockJob) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockJob_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockJob_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockJob_Expecter) String() *MockJob_String_Call {
	return &MockJob_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockJob_String_Call) Run(run func()) *MockJob_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockJob_String_Call) Return(_a0 string) *MockJob_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockJob_String_Call) RunAndReturn(run func() string) *MockJob_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJob creates a new instance of MockJob. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJob(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJob {
	mock := &MockJob{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
