// Code generated by mockery v2.52.3. DO NOT EDIT.

package mock

import (
	problem "gsprit/problem"

	mock "github.com/stretchr/testify/mock"
)

// MockPickup is an autogenerated mock type for the Pickup type
type MockPickup struct {
	mock.Mock
}

type MockPickup_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPickup) EXPECT() *MockPickup_Expecter {
	return &MockPickup_Expecter{mock: &_m.Mock}
}

// Activities provides a mock function with no fields
func (_m *MockPickup) Activities() []problem.Activity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Activities")
	}

	var r0 []problem.Activity
	if rf, ok := ret.Get(0).(func() []problem.Activity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]problem.Activity)
		}
	}

	return r0
}

// MockPickup_Activities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Activities'
type MockPickup_Activities_Call struct {
	*mock.Call
}

// Activities is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Activities() *MockPickup_Activities_Call {
	return &MockPickup_Activities_Call{Call: _e.mock.On("Activities")}
}

func (_c *MockPickup_Activities_Call) Run(run func()) *MockPickup_Activities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Activities_Call) Return(_a0 []problem.Activity) *MockPickup_Activities_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Activities_Call) RunAndReturn(run func() []problem.Activity) *MockPickup_Activities_Call {
	_c.Call.Return(run)
	return _c
}

// Id provides a mock function with no fields
func (_m *MockPickup) Id() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Id")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPickup_Id_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Id'
type MockPickup_Id_Call struct {
	*mock.Call
}

// Id is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Id() *MockPickup_Id_Call {
	return &MockPickup_Id_Call{Call: _e.mock.On("Id")}
}

func (_c *MockPickup_Id_Call) Run(run func()) *MockPickup_Id_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Id_Call) Return(_a0 string) *MockPickup_Id_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Id_Call) RunAndReturn(run func() string) *MockPickup_Id_Call {
	_c.Call.Return(run)
	return _c
}

// Index provides a mock function with no fields
func (_m *MockPickup) Index() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPickup_Index_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Index'
type MockPickup_Index_Call struct {
	*mock.Call
}

// Index is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Index() *MockPickup_Index_Call {
	return &MockPickup_Index_Call{Call: _e.mock.On("Index")}
}

func (_c *MockPickup_Index_Call) Run(run func()) *MockPickup_Index_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Index_Call) Return(_a0 int) *MockPickup_Index_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Index_Call) RunAndReturn(run func() int) *MockPickup_Index_Call {
	_c.Call.Return(run)
	return _c
}

// JobType provides a mock function with no fields
func (_m *MockPickup) JobType() problem.JobType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for JobType")
	}

	var r0 problem.JobType
	if rf, ok := ret.Get(0).(func() problem.JobType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(problem.JobType)
	}

	return r0
}

// MockPickup_JobType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JobType'
type MockPickup_JobType_Call struct {
	*mock.Call
}

// JobType is a helper method to define mock.On call
func (_e *MockPickup_Expecter) JobType() *MockPickup_JobType_Call {
	return &MockPickup_JobType_Call{Call: _e.mock.On("JobType")}
}

func (_c *MockPickup_JobType_Call) Run(run func()) *MockPickup_JobType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_JobType_Call) Return(_a0 problem.JobType) *MockPickup_JobType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_JobType_Call) RunAndReturn(run func() problem.JobType) *MockPickup_JobType_Call {
	_c.Call.Return(run)
	return _c
}

// Location provides a mock function with no fields
func (_m *MockPickup) Location() *problem.Location {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Location")
	}

	var r0 *problem.Location
	if rf, ok := ret.Get(0).(func() *problem.Location); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*problem.Location)
		}
	}

	return r0
}

// MockPickup_Location_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Location'
type MockPickup_Location_Call struct {
	*mock.Call
}

// Location is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Location() *MockPickup_Location_Call {
	return &MockPickup_Location_Call{Call: _e.mock.On("Location")}
}

func (_c *MockPickup_Location_Call) Run(run func()) *MockPickup_Location_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Location_Call) Return(_a0 *problem.Location) *MockPickup_Location_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Location_Call) RunAndReturn(run func() *problem.Location) *MockPickup_Location_Call {
	_c.Call.Return(run)
	return _c
}

// MaxTimeInVehicle provides a mock function with no fields
func (_m *MockPickup) MaxTimeInVehicle() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MaxTimeInVehicle")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockPickup_MaxTimeInVehicle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxTimeInVehicle'
type MockPickup_MaxTimeInVehicle_Call struct {
	*mock.Call
}

// MaxTimeInVehicle is a helper method to define mock.On call
func (_e *MockPickup_Expecter) MaxTimeInVehicle() *MockPickup_MaxTimeInVehicle_Call {
	return &MockPickup_MaxTimeInVehicle_Call{Call: _e.mock.On("MaxTimeInVehicle")}
}

func (_c *MockPickup_MaxTimeInVehicle_Call) Run(run func()) *MockPickup_MaxTimeInVehicle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_MaxTimeInVehicle_Call) Return(_a0 float64) *MockPickup_MaxTimeInVehicle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_MaxTimeInVehicle_Call) RunAndReturn(run func() float64) *MockPickup_MaxTimeInVehicle_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with no fields
func (_m *MockPickup) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPickup_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockPickup_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Name() *MockPickup_Name_Call {
	return &MockPickup_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockPickup_Name_Call) Run(run func()) *MockPickup_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Name_Call) Return(_a0 string) *MockPickup_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Name_Call) RunAndReturn(run func() string) *MockPickup_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Priority provides a mock function with no fields
func (_m *MockPickup) Priority() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Priority")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// MockPickup_Priority_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Priority'
type MockPickup_Priority_Call struct {
	*mock.Call
}

// Priority is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Priority() *MockPickup_Priority_Call {
	return &MockPickup_Priority_Call{Call: _e.mock.On("Priority")}
}

func (_c *MockPickup_Priority_Call) Run(run func()) *MockPickup_Priority_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Priority_Call) Return(_a0 int) *MockPickup_Priority_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Priority_Call) RunAndReturn(run func() int) *MockPickup_Priority_Call {
	_c.Call.Return(run)
	return _c
}

// RequiredSkills provides a mock function with no fields
func (_m *MockPickup) RequiredSkills() *problem.Skills {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for RequiredSkills")
	}

	var r0 *problem.Skills
	if rf, ok := ret.Get(0).(func() *problem.Skills); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*problem.Skills)
		}
	}

	return r0
}

// MockPickup_RequiredSkills_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequiredSkills'
type MockPickup_RequiredSkills_Call struct {
	*mock.Call
}

// RequiredSkills is a helper method to define mock.On call
func (_e *MockPickup_Expecter) RequiredSkills() *MockPickup_RequiredSkills_Call {
	return &MockPickup_RequiredSkills_Call{Call: _e.mock.On("RequiredSkills")}
}

func (_c *MockPickup_RequiredSkills_Call) Run(run func()) *MockPickup_RequiredSkills_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_RequiredSkills_Call) Return(_a0 *problem.Skills) *MockPickup_RequiredSkills_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_RequiredSkills_Call) RunAndReturn(run func() *problem.Skills) *MockPickup_RequiredSkills_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceDuration provides a mock function with no fields
func (_m *MockPickup) ServiceDuration() float64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceDuration")
	}

	var r0 float64
	if rf, ok := ret.Get(0).(func() float64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(float64)
	}

	return r0
}

// MockPickup_ServiceDuration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceDuration'
type MockPickup_ServiceDuration_Call struct {
	*mock.Call
}

// ServiceDuration is a helper method to define mock.On call
func (_e *MockPickup_Expecter) ServiceDuration() *MockPickup_ServiceDuration_Call {
	return &MockPickup_ServiceDuration_Call{Call: _e.mock.On("ServiceDuration")}
}

func (_c *MockPickup_ServiceDuration_Call) Run(run func()) *MockPickup_ServiceDuration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_ServiceDuration_Call) Return(_a0 float64) *MockPickup_ServiceDuration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_ServiceDuration_Call) RunAndReturn(run func() float64) *MockPickup_ServiceDuration_Call {
	_c.Call.Return(run)
	return _c
}

// SetIndex provides a mock function with given fields: index
func (_m *MockPickup) SetIndex(index int) {
	_m.Called(index)
}

// MockPickup_SetIndex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetIndex'
type MockPickup_SetIndex_Call struct {
	*mock.Call
}

// SetIndex is a helper method to define mock.On call
//   - index int
func (_e *MockPickup_Expecter) SetIndex(index interface{}) *MockPickup_SetIndex_Call {
	return &MockPickup_SetIndex_Call{Call: _e.mock.On("SetIndex", index)}
}

func (_c *MockPickup_SetIndex_Call) Run(run func(index int)) *MockPickup_SetIndex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockPickup_SetIndex_Call) Return() *MockPickup_SetIndex_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPickup_SetIndex_Call) RunAndReturn(run func(int)) *MockPickup_SetIndex_Call {
	_c.Run(run)
	return _c
}

// SetUserData provides a mock function with given fields: d
func (_m *MockPickup) SetUserData(d interface{}) {
	_m.Called(d)
}

// MockPickup_SetUserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetUserData'
type MockPickup_SetUserData_Call struct {
	*mock.Call
}

// SetUserData is a helper method to define mock.On call
//   - d interface{}
func (_e *MockPickup_Expecter) SetUserData(d interface{}) *MockPickup_SetUserData_Call {
	return &MockPickup_SetUserData_Call{Call: _e.mock.On("SetUserData", d)}
}

func (_c *MockPickup_SetUserData_Call) Run(run func(d interface{})) *MockPickup_SetUserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockPickup_SetUserData_Call) Return() *MockPickup_SetUserData_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockPickup_SetUserData_Call) RunAndReturn(run func(interface{})) *MockPickup_SetUserData_Call {
	_c.Run(run)
	return _c
}

// Size provides a mock function with no fields
func (_m *MockPickup) Size() *problem.Capacity {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 *problem.Capacity
	if rf, ok := ret.Get(0).(func() *problem.Capacity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*problem.Capacity)
		}
	}

	return r0
}

// MockPickup_Size_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Size'
type MockPickup_Size_Call struct {
	*mock.Call
}

// Size is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Size() *MockPickup_Size_Call {
	return &MockPickup_Size_Call{Call: _e.mock.On("Size")}
}

func (_c *MockPickup_Size_Call) Run(run func()) *MockPickup_Size_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Size_Call) Return(_a0 *problem.Capacity) *MockPickup_Size_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Size_Call) RunAndReturn(run func() *problem.Capacity) *MockPickup_Size_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with no fields
func (_m *MockPickup) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPickup_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type MockPickup_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
func (_e *MockPickup_Expecter) String() *MockPickup_String_Call {
	return &MockPickup_String_Call{Call: _e.mock.On("String")}
}

func (_c *MockPickup_String_Call) Run(run func()) *MockPickup_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_String_Call) Return(_a0 string) *MockPickup_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_String_Call) RunAndReturn(run func() string) *MockPickup_String_Call {
	_c.Call.Return(run)
	return _c
}

// TimeWindow provides a mock function with no fields
func (_m *MockPickup) TimeWindow() problem.TimeWindow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeWindow")
	}

	var r0 problem.TimeWindow
	if rf, ok := ret.Get(0).(func() problem.TimeWindow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(problem.TimeWindow)
		}
	}

	return r0
}

// MockPickup_TimeWindow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeWindow'
type MockPickup_TimeWindow_Call struct {
	*mock.Call
}

// TimeWindow is a helper method to define mock.On call
func (_e *MockPickup_Expecter) TimeWindow() *MockPickup_TimeWindow_Call {
	return &MockPickup_TimeWindow_Call{Call: _e.mock.On("TimeWindow")}
}

func (_c *MockPickup_TimeWindow_Call) Run(run func()) *MockPickup_TimeWindow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_TimeWindow_Call) Return(_a0 problem.TimeWindow) *MockPickup_TimeWindow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_TimeWindow_Call) RunAndReturn(run func() problem.TimeWindow) *MockPickup_TimeWindow_Call {
	_c.Call.Return(run)
	return _c
}

// TimeWindows provides a mock function with no fields
func (_m *MockPickup) TimeWindows() []problem.TimeWindow {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TimeWindows")
	}

	var r0 []problem.TimeWindow
	if rf, ok := ret.Get(0).(func() []problem.TimeWindow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]problem.TimeWindow)
		}
	}

	return r0
}

// MockPickup_TimeWindows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TimeWindows'
type MockPickup_TimeWindows_Call struct {
	*mock.Call
}

// TimeWindows is a helper method to define mock.On call
func (_e *MockPickup_Expecter) TimeWindows() *MockPickup_TimeWindows_Call {
	return &MockPickup_TimeWindows_Call{Call: _e.mock.On("TimeWindows")}
}

func (_c *MockPickup_TimeWindows_Call) Run(run func()) *MockPickup_TimeWindows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_TimeWindows_Call) Return(_a0 []problem.TimeWindow) *MockPickup_TimeWindows_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_TimeWindows_Call) RunAndReturn(run func() []problem.TimeWindow) *MockPickup_TimeWindows_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with no fields
func (_m *MockPickup) Type() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPickup_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockPickup_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockPickup_Expecter) Type() *MockPickup_Type_Call {
	return &MockPickup_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockPickup_Type_Call) Run(run func()) *MockPickup_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_Type_Call) Return(_a0 string) *MockPickup_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_Type_Call) RunAndReturn(run func() string) *MockPickup_Type_Call {
	_c.Call.Return(run)
	return _c
}

// UserData provides a mock function with no fields
func (_m *MockPickup) UserData() interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserData")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// MockPickup_UserData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserData'
type MockPickup_UserData_Call struct {
	*mock.Call
}

// UserData is a helper method to define mock.On call
func (_e *MockPickup_Expecter) UserData() *MockPickup_UserData_Call {
	return &MockPickup_UserData_Call{Call: _e.mock.On("UserData")}
}

func (_c *MockPickup_UserData_Call) Run(run func()) *MockPickup_UserData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPickup_UserData_Call) Return(_a0 interface{}) *MockPickup_UserData_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPickup_UserData_Call) RunAndReturn(run func() interface{}) *MockPickup_UserData_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPickup creates a new instance of MockPickup. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPickup(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPickup {
	mock := &MockPickup{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
